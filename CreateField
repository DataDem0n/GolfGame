import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Queue;

/**
 * CreateField
 */
public class CreateField 
{
    public double interval;
    public double[] holeCoordinates = new double[2];
    public int queueSize = 0;                                                   //testing purposes

    public CreateField(double interval, double holeCoorx, double holeCoory)     //interval = trade-off between accuracy and speed.
    {
        this.interval = interval;
        holeCoordinates[0] = holeCoorx;
        holeCoordinates[1] = holeCoory;
    }

    public int[] getHolePosition()
    {
        int[] arrayPosition = new int[2];
        double coordinateX = holeCoordinates[0];
        double coordinateY = holeCoordinates[1];

        if(coordinateX > 0)
        {
        coordinateX += 25;
        }
        if(coordinateY > 0)
        {
        coordinateY += 25;
        }
        
        arrayPosition[0] = (int)( coordinateX/interval);
        arrayPosition[1] = (int)( coordinateY/interval);
        return arrayPosition;
    }

    public int[][] Field()
    {
        int[][] field = new int[(int)(50/interval)][(int)(50/interval)];
        for(int i = 0; i<field.length;i++)
        {
            for(int j = 0;j<field[0].length; j++)
            {
               field[i][j] = -1;
            }
            
        }
        return field;
    }

    public boolean Contain(int[] neighbor, ArrayList<int[]> container)
    {
        for(int i = 0; i < container.size(); i++)
        {
           
            if(neighbor[0] == container.get(i)[0] && neighbor[1] == container.get(i)[1])
            {
                
                return true;
            }
        }
        return false; 
    }

    public int[][] floodFill()
    {
        Queue<int[]> queue = new ArrayDeque<int[]>();
        int[][] field = Field();
        int[] start = {getHolePosition()[0],getHolePosition()[1]};
        field[start[0]][start[1]] = 0;
        queue.add(start);
        ArrayList<int[]> container = new ArrayList<int[]>();
        

       
        while(queue.peek() != null)                                                                   
        {
            int[] storeNeighborValues = new int[4];
            
            for(int i = 0; i < storeNeighborValues.length; i++)
            {
                storeNeighborValues[i] = -1;
            }
            
            if(queue.peek()[0]+1 < field.length)
            {
                int[] neighbor1 = {queue.peek()[0]+1, queue.peek()[1]};
                storeNeighborValues[0] = field[queue.peek()[0]+1][queue.peek()[1]];                                               
                if(field[queue.peek()[0]+1][queue.peek()[1]]>field[queue.peek()[0]][queue.peek()[1]]+1 || field[queue.peek()[0]+1][queue.peek()[1]]<0)
                {
                    field[queue.peek()[0]+1][queue.peek()[1]] = field[queue.peek()[0]][queue.peek()[1]]+1;
                }
                if(Contain(neighbor1, container) == false)                                      
                {
                    queue.add(neighbor1);
                    queueSize++;                                                                                                   
                    container.add(neighbor1);
                }
              
            }
            if(queue.peek()[0]-1 >= 0)
            {
                int[] neighbor2 = {queue.peek()[0]-1, queue.peek()[1]};
                storeNeighborValues[1] = field[queue.peek()[0]-1][queue.peek()[1]];
                if(field[queue.peek()[0]-1][queue.peek()[1]]>field[queue.peek()[0]][queue.peek()[1]]+1 || field[queue.peek()[0]-1][queue.peek()[1]]<0)
                {
                    field[queue.peek()[0]-1][queue.peek()[1]] = field[queue.peek()[0]][queue.peek()[1]]+1;
                }
                if(Contain(neighbor2, container) == false)                                      
                {
                    queue.add(neighbor2);
                    queueSize++;                                                                                                       
                    container.add(neighbor2); 
                }
                
            }
            if(queue.peek()[1]+1 < field[0].length)
            {
                int[] neighbor3 = {queue.peek()[0], queue.peek()[1]+1};
                storeNeighborValues[2] = field[queue.peek()[0]][queue.peek()[1]+1];
                if(field[queue.peek()[0]][queue.peek()[1]+1]>field[queue.peek()[0]][queue.peek()[1]]+1 || field[queue.peek()[0]][queue.peek()[1]+1]<0)
                {
                    field[queue.peek()[0]][queue.peek()[1]+1] = field[queue.peek()[0]][queue.peek()[1]]+1;
                }
                if(Contain(neighbor3, container) == false)                                   
                {
                    queue.add(neighbor3);
                    queueSize++;                                                                                                        
                    container.add(neighbor3);
                }
                
            }
            if(queue.peek()[1]-1 >= 0)
            {
                int[] neighbor4 = {queue.peek()[0], queue.peek()[1]-1};
                storeNeighborValues[3] = field[queue.peek()[0]][queue.peek()[1]-1];
                if(field[queue.peek()[0]][queue.peek()[1]-1]>field[queue.peek()[0]][queue.peek()[1]]+1 || field[queue.peek()[0]][queue.peek()[1]-1]<0)
                {
                    field[queue.peek()[0]][queue.peek()[1]-1] = field[queue.peek()[0]][queue.peek()[1]]+1;
                }
                if(Contain(neighbor4, container) == false)                                      
                {
                    queue.add(neighbor4);   
                    queueSize++;                                                                                                     
                    container.add(neighbor4);
                }
                
            }
          
            
        
            queue.poll(); 
            queueSize--;                                                                                                                   
            
        }
        return field;
    }

   



  
    public static void main(String[] args) 
    {
        CreateField a = new CreateField(1, 20, 20);                                                         
        int[][] testing = a.floodFill();
        System.out.println(a.queueSize);
    

        for(int i = 0; i<testing.length;i++)
        {
            for(int j = 0;j<testing[0].length; j++)
            {
                System.out.print(testing[i][j] + " ");
            }
            System.out.println();
        }
    }

    

}

